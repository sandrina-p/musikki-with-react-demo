/*------------------------------------*\
    #VARIABLES
\*------------------------------------*/

$clrBlack: #000000;
$clrDark: #121212;
$clrGray: lighten($clrDark, 40%);
$clrLight: lighten($clrDark, 88%);
$clrWhite: #ffffff;


@function rem($px) {
    // 1rem --> 16px
    // xrem --> $px
    $rem: $px * 1rem / 16 ;
    @return $rem;
}

@function em($px) {
    // 1rem --> 16px
    // xrem --> $px
    $rem: $px * 1em / 16 ;
    @return $rem;
}

$safeArea: rem(16);

$speed: 250ms;

$font-mono: monospace;
$font-sans: 'Share', cursive;

$fontLx: rem(26);
$fontL: rem(18);
$fontM: rem(16);
$fontS: rem(14);
$fontXS: rem(12);

$lineHeightS: 1.2;
$lineHeightM: 1.5;
$lineHeightL: 1.7;

$fReg: 300;
$fMed: 400;
$fBold: 700;


/*------------------------------------*\
    @mixins / &placeholder / functions

    > @function calculate rem
    > @media queries
    > @position centerxy
    > flexbox vs floats
    > calc
    > %retina2x
    > others
\*------------------------------------*/



/*------------------------------------*\
    #MEDIA QUERIES
\*------------------------------------*/

$mobile-width: em(450);
$phablet-width: em(550);
$tablet-width: em(750);
$laptop-width: em(1000);
$desktop-width: em(1600);
$mediaHeight: em(400);

@mixin media($media) {

    @if $media == untilTablet {
        @media (max-width: #{$tablet-width - em(1)}) {
            @content;
        }
    }

    @if $media == mobile {
        @media (min-width: $mobile-width) {
            @content;
        }
    }

    @if $media == phablet {
        @media (min-width: $phablet-width) {
            @content;
        }
    }

    @if $media == tablet {
        @media (min-width: $tablet-width) and (min-height: $mediaHeight) {
            @content;
        }
    }
}


/*------------------------------------*\
    #FLEXBOX & CLEARFIX
\*------------------------------------*/

@mixin cf {
    *zoom: 1;

	&:before,
	&:after {
	    content: "";
	    display: table;
	}

	&:after {
	    clear: both;
	}

    > * {
        float: left;
    }
}

%cf {
    @include cf;
}


@mixin flexbox($noFlex:null) {

    // .flexbox & { //no moderniz in musikki
        display: flex;

        & > * {
            // this is to prevent bugs on IE 10 11
            flex-grow: 0;
            flex-shrink: 1;
            flex-basis: auto;
        }
    // }

    @if ($noFlex) {
        .no-flexbox & {
            @include cf;
        }
    }
}

%flexbox {
    @include flexbox;
}

@include media(mobile) {
    %flexbox-mob {
        @include flexbox;
    }

    %flexbox-noFlex-mob {
        @include flexbox(true);
    }
}
@include media(phablet) {
    %flexbox-pha {
        @include flexbox;
    }

    %flexbox-noFlex-pha {
        @include flexbox(true);
    }

    %cf-pha {
        @include cf;
    }
}
@include media(tablet) {
    %flexbox-tab {
        @include flexbox;
    }

    %flexbox-noFlex-tab {
        @include flexbox(true);
    }

    %cf-tab {
        @include cf;
    }
}
@include media(laptop) {
    %flexbox-lap {
        @include flexbox;
    }
}

// @include flexboxProp

%flexbox-noFlex {
    @include flexbox(true);
}


@mixin flexboxProp {
    .flexbox & {
        @content;
    }
}

@mixin noFlex {
    .no-flexbox & {
        @content;
    }
}

// .test {
//     @include noFlex {
//         padding: 10px;
//     };
// }
//output css
// .no-flexbox .test {
//     padding: 10px;
// }


/*------------------------------------*\
    #CALC
\*------------------------------------*/
@mixin calc($prop, $valFallBack, $valCal) {
    #{$prop}: $valFallBack; // poor browsers
    #{$prop}: calc(#{$valCal});
}
// @include calc(width, 100%, 100% - #{$safeArea}/2);
// output:
// .test {
//      width: 100%;
//      width: calc(100% - 7px);
// }


/*------------------------------------*\
    #SUPPORT
\*------------------------------------*/
@mixin fallback($prop, $valFallBack, $val) {
    #{$prop}: $valFallBack; // poor browsers
    #{$prop}: $val;
}
// @include fallback(width, 100%, 100vh);
// output:
// .test {
//      width: 100%;
//      width: 100vh);
// }


/*------------------------------------*\
    #PLACEHOLDER
\*------------------------------------*/
@mixin placeHolder {
    &::-webkit-input-placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder { /* Internet Explorer 10-11 */
       @content;
    }
}



/*------------------------------------*\
    #BORDER
\*------------------------------------*/
$borderW: 3px;
$borderS: $borderW solid;

%borderAll {
    border: $borderS;
}

%borderTop {
    border-top: $borderS;
}

%borderBottom {
    border-bottom: $borderS;
}

@mixin setBorder($border) {
    @if $border == all {
        @extend %borderAll;
    }

    @if $border == top {
        @extend %borderTop;
    }

    @if $border == bottom {
        @extend %borderBottom;
    }
}


@mixin borderradius($a:random(12)+5+px, $b:random(12)+5+px, $c:random(12)+5+px, $d:random(12)+5+px) {
    border-top-left-radius: $a;
    border-top-right-radius: $b;
    border-bottom-right-radius: $c;
    border-bottom-left-radius: $d;
}
