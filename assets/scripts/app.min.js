/*! modernizr 3.3.1 (Custom Build) | MIT *
 * https://modernizr.com/download/?-flexbox-setclasses !*/
!function (e, n, t) {
    function r(e, n) {
        return typeof e === n;
    }function o() {
        var e, n, t, o, s, i, a;for (var l in C) if (C.hasOwnProperty(l)) {
            if (e = [], n = C[l], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (t = 0; t < n.options.aliases.length; t++) e.push(n.options.aliases[t].toLowerCase());for (o = r(n.fn, "function") ? n.fn() : n.fn, s = 0; s < e.length; s++) i = e[s], a = i.split("."), 1 === a.length ? Modernizr[a[0]] = o : (!Modernizr[a[0]] || Modernizr[a[0]] instanceof Boolean || (Modernizr[a[0]] = new Boolean(Modernizr[a[0]])), Modernizr[a[0]][a[1]] = o), g.push((o ? "" : "no-") + a.join("-"));
        }
    }function s(e) {
        var n = x.className,
            t = Modernizr._config.classPrefix || "";if (_ && (n = n.baseVal), Modernizr._config.enableJSClass) {
            var r = new RegExp("(^|\\s)" + t + "no-js(\\s|$)");n = n.replace(r, "$1" + t + "js$2");
        }Modernizr._config.enableClasses && (n += " " + t + e.join(" " + t), _ ? x.className.baseVal = n : x.className = n);
    }function i(e, n) {
        return !!~("" + e).indexOf(n);
    }function a(e) {
        return e.replace(/([a-z])-([a-z])/g, function (e, n, t) {
            return n + t.toUpperCase();
        }).replace(/^-/, "");
    }function l() {
        return "function" != typeof n.createElement ? n.createElement(arguments[0]) : _ ? n.createElementNS.call(n, "http://www.w3.org/2000/svg", arguments[0]) : n.createElement.apply(n, arguments);
    }function f(e, n) {
        return function () {
            return e.apply(n, arguments);
        };
    }function u(e, n, t) {
        var o;for (var s in e) if (e[s] in n) return t === !1 ? e[s] : (o = n[e[s]], r(o, "function") ? f(o, t || n) : o);return !1;
    }function d(e) {
        return e.replace(/([A-Z])/g, function (e, n) {
            return "-" + n.toLowerCase();
        }).replace(/^ms-/, "-ms-");
    }function p() {
        var e = n.body;return e || (e = l(_ ? "svg" : "body"), e.fake = !0), e;
    }function c(e, t, r, o) {
        var s,
            i,
            a,
            f,
            u = "modernizr",
            d = l("div"),
            c = p();if (parseInt(r, 10)) for (; r--;) a = l("div"), a.id = o ? o[r] : u + (r + 1), d.appendChild(a);return s = l("style"), s.type = "text/css", s.id = "s" + u, (c.fake ? c : d).appendChild(s), c.appendChild(d), s.styleSheet ? s.styleSheet.cssText = e : s.appendChild(n.createTextNode(e)), d.id = u, c.fake && (c.style.background = "", c.style.overflow = "hidden", f = x.style.overflow, x.style.overflow = "hidden", x.appendChild(c)), i = t(d, e), c.fake ? (c.parentNode.removeChild(c), x.style.overflow = f, x.offsetHeight) : d.parentNode.removeChild(d), !!i;
    }function m(n, r) {
        var o = n.length;if ("CSS" in e && "supports" in e.CSS) {
            for (; o--;) if (e.CSS.supports(d(n[o]), r)) return !0;return !1;
        }if ("CSSSupportsRule" in e) {
            for (var s = []; o--;) s.push("(" + d(n[o]) + ":" + r + ")");return s = s.join(" or "), c("@supports (" + s + ") { #modernizr { position: absolute; } }", function (e) {
                return "absolute" == getComputedStyle(e, null).position;
            });
        }return t;
    }function h(e, n, o, s) {
        function f() {
            d && (delete z.style, delete z.modElem);
        }if (s = r(s, "undefined") ? !1 : s, !r(o, "undefined")) {
            var u = m(e, o);if (!r(u, "undefined")) return u;
        }for (var d, p, c, h, v, y = ["modernizr", "tspan", "samp"]; !z.style && y.length;) d = !0, z.modElem = l(y.shift()), z.style = z.modElem.style;for (c = e.length, p = 0; c > p; p++) if (h = e[p], v = z.style[h], i(h, "-") && (h = a(h)), z.style[h] !== t) {
            if (s || r(o, "undefined")) return f(), "pfx" == n ? h : !0;try {
                z.style[h] = o;
            } catch (g) {}if (z.style[h] != v) return f(), "pfx" == n ? h : !0;
        }return f(), !1;
    }function v(e, n, t, o, s) {
        var i = e.charAt(0).toUpperCase() + e.slice(1),
            a = (e + " " + b.join(i + " ") + i).split(" ");return r(n, "string") || r(n, "undefined") ? h(a, n, o, s) : (a = (e + " " + E.join(i + " ") + i).split(" "), u(a, n, t));
    }function y(e, n, r) {
        return v(e, t, t, n, r);
    }var g = [],
        C = [],
        w = { _version: "3.3.1", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function (e, n) {
            var t = this;setTimeout(function () {
                n(t[e]);
            }, 0);
        }, addTest: function (e, n, t) {
            C.push({ name: e, fn: n, options: t });
        }, addAsyncTest: function (e) {
            C.push({ name: null, fn: e });
        } },
        Modernizr = function () {};Modernizr.prototype = w, Modernizr = new Modernizr();var x = n.documentElement,
        _ = "svg" === x.nodeName.toLowerCase(),
        S = "Moz O ms Webkit",
        b = w._config.usePrefixes ? S.split(" ") : [];w._cssomPrefixes = b;var E = w._config.usePrefixes ? S.toLowerCase().split(" ") : [];w._domPrefixes = E;var P = { elem: l("modernizr") };Modernizr._q.push(function () {
        delete P.elem;
    });var z = { style: P.elem.style };Modernizr._q.unshift(function () {
        delete z.style;
    }), w.testAllProps = v, w.testAllProps = y, Modernizr.addTest("flexbox", y("flexBasis", "1px", !0)), o(), s(g), delete w.addTest, delete w.addAsyncTest;for (var N = 0; N < Modernizr._q.length; N++) Modernizr._q[N]();e.Modernizr = Modernizr;
}(window, document);

/*!
 * modernizr v3.3.1
 * Build https://modernizr.com/download?-touchevents-dontmin
 *
 * Copyright (c)
 *  Faruk Ates
 *  Paul Irish
 *  Alex Sexton
 *  Ryan Seddon
 *  Patrick Kettner
 *  Stu Cox
 *  Richard Herrera

 * MIT License
 */

/*
 * Modernizr tests which native CSS3 and HTML5 features are available in the
 * current UA and makes the results available to you in two ways: as properties on
 * a global `Modernizr` object, and as classes on the `<html>` element. This
 * information allows you to progressively enhance your pages with a granular level
 * of control over the experience.
*/

;(function (window, document, undefined) {
    var tests = [];

    /**
     *
     * ModernizrProto is the constructor for Modernizr
     *
     * @class
     * @access public
     */

    var ModernizrProto = {
        // The current version, dummy
        _version: '3.3.1',

        // Any settings that don't work as separate modules
        // can go in here as configuration.
        _config: {
            'classPrefix': '',
            'enableClasses': true,
            'enableJSClass': true,
            'usePrefixes': true
        },

        // Queue of tests
        _q: [],

        // Stub these for people who are listening
        on: function (test, cb) {
            // I don't really think people should do this, but we can
            // safe guard it a bit.
            // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.
            // This is in case people listen to synchronous tests. I would leave it out,
            // but the code to *disallow* sync tests in the real version of this
            // function is actually larger than this.
            var self = this;
            setTimeout(function () {
                cb(self[test]);
            }, 0);
        },

        addTest: function (name, fn, options) {
            tests.push({ name: name, fn: fn, options: options });
        },

        addAsyncTest: function (fn) {
            tests.push({ name: null, fn: fn });
        }
    };

    // Fake some of Object.create so we can force non test results to be non "own" properties.
    var Modernizr = function () {};
    Modernizr.prototype = ModernizrProto;

    // Leak modernizr globally when you `require` it rather than force it here.
    // Overwrite name so constructor name is nicer :D
    Modernizr = new Modernizr();

    var classes = [];

    /**
     * is returns a boolean if the typeof an obj is exactly type.
     *
     * @access private
     * @function is
     * @param {*} obj - A thing we want to check the type of
     * @param {string} type - A string to compare the typeof against
     * @returns {boolean}
     */

    function is(obj, type) {
        return typeof obj === type;
    }
    ;

    /**
     * Run through all tests and detect their support in the current UA.
     *
     * @access private
     */

    function testRunner() {
        var featureNames;
        var feature;
        var aliasIdx;
        var result;
        var nameIdx;
        var featureName;
        var featureNameSplit;

        for (var featureIdx in tests) {
            if (tests.hasOwnProperty(featureIdx)) {
                featureNames = [];
                feature = tests[featureIdx];
                // run the test, throw the return value into the Modernizr,
                // then based on that boolean, define an appropriate className
                // and push it into an array of classes we'll join later.
                //
                // If there is no name, it's an 'async' test that is run,
                // but not directly added to the object. That should
                // be done with a post-run addTest call.
                if (feature.name) {
                    featureNames.push(feature.name.toLowerCase());

                    if (feature.options && feature.options.aliases && feature.options.aliases.length) {
                        // Add all the aliases into the names list
                        for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
                            featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
                        }
                    }
                }

                // Run the test, or use the raw value if it's not a function
                result = is(feature.fn, 'function') ? feature.fn() : feature.fn;

                // Set each of the names on the Modernizr object
                for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
                    featureName = featureNames[nameIdx];
                    // Support dot properties as sub tests. We don't do checking to make sure
                    // that the implied parent tests have been added. You must call them in
                    // order (either in the test, or make the parent test a dependency).
                    //
                    // Cap it to TWO to make the logic simple and because who needs that kind of subtesting
                    // hashtag famous last words
                    featureNameSplit = featureName.split('.');

                    if (featureNameSplit.length === 1) {
                        Modernizr[featureNameSplit[0]] = result;
                    } else {
                        // cast to a Boolean, if not one already
                        /* jshint -W053 */
                        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
                            Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
                        }

                        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
                    }

                    classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));
                }
            }
        }
    }
    ;

    /**
     * List of property values to set for css tests. See ticket #21
     * http://git.io/vUGl4
     *
     * @memberof Modernizr
     * @name Modernizr._prefixes
     * @optionName Modernizr._prefixes
     * @optionProp prefixes
     * @access public
     * @example
     *
     * Modernizr._prefixes is the internal list of prefixes that we test against
     * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply
     * an array of kebab-case vendor prefixes you can use within your code.
     *
     * Some common use cases include
     *
     * Generating all possible prefixed version of a CSS property
     * ```js
     * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');
     *
     * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'
     * ```
     *
     * Generating all possible prefixed version of a CSS value
     * ```js
     * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';
     *
     * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'
     * ```
     */

    // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test
    // values in feature detects to continue to work
    var prefixes = ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['', ''];

    // expose these for the plugin API. Look in the source for how to join() them against your input
    ModernizrProto._prefixes = prefixes;

    /**
     * docElement is a convenience wrapper to grab the root element of the document
     *
     * @access private
     * @returns {HTMLElement|SVGElement} The root element of the document
     */

    var docElement = document.documentElement;

    /**
     * A convenience helper to check if the document we are running in is an SVG document
     *
     * @access private
     * @returns {boolean}
     */

    var isSVG = docElement.nodeName.toLowerCase() === 'svg';

    /**
     * createElement is a convenience wrapper around document.createElement. Since we
     * use createElement all over the place, this allows for (slightly) smaller code
     * as well as abstracting away issues with creating elements in contexts other than
     * HTML documents (e.g. SVG documents).
     *
     * @access private
     * @function createElement
     * @returns {HTMLElement|SVGElement} An HTML or SVG element
     */

    function createElement() {
        if (typeof document.createElement !== 'function') {
            // This is the case in IE7, where the type of createElement is "object".
            // For this reason, we cannot call apply() as Object is not a Function.
            return document.createElement(arguments[0]);
        } else if (isSVG) {
            return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);
        } else {
            return document.createElement.apply(document, arguments);
        }
    }

    ;

    /**
     * getBody returns the body of a document, or an element that can stand in for
     * the body if a real body does not exist
     *
     * @access private
     * @function getBody
     * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an
     * artificially created element that stands in for the body
     */

    function getBody() {
        // After page load injecting a fake body doesn't work so check if body exists
        var body = document.body;

        if (!body) {
            // Can't use the real body create a fake one.
            body = createElement(isSVG ? 'svg' : 'body');
            body.fake = true;
        }

        return body;
    }

    ;

    /**
     * injectElementWithStyles injects an element with style element and some CSS rules
     *
     * @access private
     * @function injectElementWithStyles
     * @param {string} rule - String representing a css rule
     * @param {function} callback - A function that is used to test the injected element
     * @param {number} [nodes] - An integer representing the number of additional nodes you want injected
     * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes
     * @returns {boolean}
     */

    function injectElementWithStyles(rule, callback, nodes, testnames) {
        var mod = 'modernizr';
        var style;
        var ret;
        var node;
        var docOverflow;
        var div = createElement('div');
        var body = getBody();

        if (parseInt(nodes, 10)) {
            // In order not to give false positives we create a node for each test
            // This also allows the method to scale for unspecified uses
            while (nodes--) {
                node = createElement('div');
                node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
                div.appendChild(node);
            }
        }

        style = createElement('style');
        style.type = 'text/css';
        style.id = 's' + mod;

        // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
        // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270
        (!body.fake ? div : body).appendChild(style);
        body.appendChild(div);

        if (style.styleSheet) {
            style.styleSheet.cssText = rule;
        } else {
            style.appendChild(document.createTextNode(rule));
        }
        div.id = mod;

        if (body.fake) {
            //avoid crashing IE8, if background image is used
            body.style.background = '';
            //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible
            body.style.overflow = 'hidden';
            docOverflow = docElement.style.overflow;
            docElement.style.overflow = 'hidden';
            docElement.appendChild(body);
        }

        ret = callback(div, rule);
        // If this is done after page load we don't want to remove the body so check if body exists
        if (body.fake) {
            body.parentNode.removeChild(body);
            docElement.style.overflow = docOverflow;
            // Trigger layout so kinetic scrolling isn't disabled in iOS6+
            docElement.offsetHeight;
        } else {
            div.parentNode.removeChild(div);
        }

        return !!ret;
    }

    ;

    /**
     * testStyles injects an element with style element and some CSS rules
     *
     * @memberof Modernizr
     * @name Modernizr.testStyles
     * @optionName Modernizr.testStyles()
     * @optionProp testStyles
     * @access public
     * @function testStyles
     * @param {string} rule - String representing a css rule
     * @param {function} callback - A function that is used to test the injected element
     * @param {number} [nodes] - An integer representing the number of additional nodes you want injected
     * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes
     * @returns {boolean}
     * @example
     *
     * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page
     * along with (possibly multiple) DOM elements. This lets you check for features
     * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).
     *
     * ```js
     * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {
     *   // elem is the first DOM node in the page (by default #modernizr)
     *   // rule is the first argument you supplied - the CSS rule in string form
     *
     *   addTest('widthworks', elem.style.width === '9px')
     * });
     * ```
     *
     * If your test requires multiple nodes, you can include a third argument
     * indicating how many additional div elements to include on the page. The
     * additional nodes are injected as children of the `elem` that is returned as
     * the first argument to the callback.
     *
     * ```js
     * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {
     *   document.getElementById('modernizr').style.width === '1px'; // true
     *   document.getElementById('modernizr2').style.width === '2px'; // true
     *   elem.firstChild === document.getElementById('modernizr2'); // true
     * }, 1);
     * ```
     *
     * By default, all of the additional elements have an ID of `modernizr[n]`, where
     * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,
     * the second additional is `#modernizr3`, etc.).
     * If you want to have more meaningful IDs for your function, you can provide
     * them as the fourth argument, as an array of strings
     *
     * ```js
     * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {
     *   elem.firstChild === document.getElementById('foo'); // true
     *   elem.lastChild === document.getElementById('bar'); // true
     * }, 2, ['foo', 'bar']);
     * ```
     *
     */

    var testStyles = ModernizrProto.testStyles = injectElementWithStyles;

    /*!
    {
      "name": "Touch Events",
      "property": "touchevents",
      "caniuse" : "touch",
      "tags": ["media", "attribute"],
      "notes": [{
        "name": "Touch Events spec",
        "href": "https://www.w3.org/TR/2013/WD-touch-events-20130124/"
      }],
      "warnings": [
        "Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device"
      ],
      "knownBugs": [
        "False-positive on some configurations of Nokia N900",
        "False-positive on some BlackBerry 6.0 builds – https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695"
      ]
    }
    !*/
    /* DOC
    Indicates if the browser supports the W3C Touch Events API.
    
    This *does not* necessarily reflect a touchscreen device:
    
    * Older touchscreen devices only emulate mouse events
    * Modern IE touch devices implement the Pointer Events API instead: use `Modernizr.pointerevents` to detect support for that
    * Some browsers & OS setups may enable touch APIs when no touchscreen is connected
    * Future browsers may implement other event models for touch interactions
    
    See this article: [You Can't Detect A Touchscreen](http://www.stucox.com/blog/you-cant-detect-a-touchscreen/).
    
    It's recommended to bind both mouse and touch/pointer events simultaneously – see [this HTML5 Rocks tutorial](http://www.html5rocks.com/en/mobile/touchandmouse/).
    
    This test will also return `true` for Firefox 4 Multitouch support.
    */

    // Chrome (desktop) used to lie about its support on this, but that has since been rectified: http://crbug.com/36415
    Modernizr.addTest('touchevents', function () {
        var bool;
        if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {
            bool = true;
        } else {
            // include the 'heartz' as a way to have a non matching MQ to help terminate the join
            // https://git.io/vznFH
            var query = ['@media (', prefixes.join('touch-enabled),('), 'heartz', ')', '{#modernizr{top:9px;position:absolute}}'].join('');
            testStyles(query, function (node) {
                bool = node.offsetTop === 9;
            });
        }
        return bool;
    });

    // Run each test
    testRunner();

    delete ModernizrProto.addTest;
    delete ModernizrProto.addAsyncTest;

    // Run the things that are supposed to run after the tests
    for (var i = 0; i < Modernizr._q.length; i++) {
        Modernizr._q[i]();
    }

    // Leak Modernizr namespace
    window.Modernizr = Modernizr;

    ;
})(window, document);

// var { Router, Route, IndexRoute, hashHistory, IndexLink, Link, browserHistory } = ReactRouter;
// import { Router, Route, IndexRoute, hashHistory, IndexLink, Link, browserHistory } from 'react-router';

var Router = ReactRouter.Router;
var Route = ReactRouter.Route;
var IndexRoute = ReactRouter.IndexRoute;
var Link = ReactRouter.Link;
var browserHistory = ReactRouter.browserHistory;
var hashHistory = ReactRouter.hashHistory;
var IndexRedirect = ReactRouter.IndexRedirect;

/**
 * [LocalStorage basic functions DRYed]
 */
var LS = function () {

    return {
        get: function (key, parse = false) {
            return parse ? JSON.parse(localStorage.getItem(key)) : localStorage.getItem(key);
        },

        set: function (key, value, stringify = false) {
            return stringify ? localStorage.setItem(key, JSON.stringify(value)) : localStorage.setItem(key, value);
        },

        remove: function (key, value) {
            return localStorage.removeItem(key);
        }
    };
}();

/**
 * [Is not jQuery x)]
 */
var Ajx = function () {
    var xhr = null;

    return {
        getJSON: function (method, url) {
            return new Promise(function (resolve, reject) {

                if (xhr != null) {
                    xhr.abort();
                } else {
                    xhr = new XMLHttpRequest();
                }

                xhr.open(method, url);
                xhr.onload = function () {
                    if (this.status >= 200 && this.status < 300) {
                        resolve(JSON.parse(xhr.response));
                    } else {
                        reject({
                            status: this.status,
                            statusText: xhr.statusText
                        });
                    }
                };
                xhr.onerror = function () {
                    reject({
                        status: this.status,
                        statusText: xhr.statusText
                    });
                };
                xhr.send();
            });
        }
    };
}();

class InitialPage extends React.Component {

    constructor() {
        super();

        this.state = {
            userLogged: LS.get('userLogged') || false
        };
    }

    render() {
        let userLogged = this.state.userLogged,
            mkUsers = LS.get('mkUsers', true) || false;

        if (userLogged && mkUsers && mkUsers[userLogged]) {

            switch (this.props.dash) {
                case 'dashboard/favorites':
                    return React.createElement(Dashboard, { view: "Favorites", setLogged: this._setLogged.bind(this) });
                default:
                    // hashHistory.push('dashboard/search'); FIXME: for some reason it trows an error on console: Uncaught SyntaxError: Invalid regular expression: /^//: Stack overflow
                    return React.createElement(Dashboard, { view: "Search", setLogged: this._setLogged.bind(this) });
            }
        } else {
            return this.props.dash == "register" ? React.createElement(Register, { setLogged: this._setLogged.bind(this) }) : React.createElement(Login, { setLogged: this._setLogged.bind(this) });
        }
    }

    _setLogged(username = false) {
        this.setState({
            userLogged: username
        });

        if (username) {
            LS.set('userLogged', username);
            hashHistory.push('dashboard/search');
        } else {
            LS.remove('userLogged');
            hashHistory.push('/');
        }
    }
}

class Window extends React.Component {

    constructor() {
        super();

        this.state = {
            linksFooter: [['https://github.com/sandrina-p', 'sandrina-p'], ['https://github.com/sandrina-p/musikki-with-react-demo', 'github'], ['https://musikki.com', 'Powered by Musikki']],
            windowClasses: 'Window ' + this._MTouchEvents()
        };
    }

    _MTouchEvents() {
        return Modernizr.touchevents ? 'touchevents' : 'no-touchevents';
    }

    render() {
        //get window title NOTE: I fell this is not the best approach but it works x)
        let viewTitle = window.location.hash.split('/');
        let viewTitleKey = viewTitle[viewTitle.length - 1];
        viewTitle = viewTitleKey == "" ? 'Musikki' : 'Musikki . ' + viewTitleKey;

        let linksLi = this._getLinksFooter();
        let linksUl = React.createElement(
            "ul",
            { className: "Window-footer-ul" },
            linksLi
        );

        return React.createElement(
            "div",
            { className: this.state.windowClasses },
            React.createElement(
                "header",
                { className: "Window-header" },
                React.createElement(
                    "h1",
                    null,
                    viewTitle
                )
            ),
            React.createElement(
                "main",
                { className: "Window-main" },
                this.props.children
            ),
            React.createElement(
                "footer",
                { className: "Window-footer" },
                React.createElement(
                    "h6",
                    { className: "sr-only" },
                    "Footer"
                ),
                linksUl
            )
        );
    }

    _getLinksFooter() {
        return this.state.linksFooter.map((link, index) => {
            return React.createElement(
                "li",
                { key: index },
                " ",
                React.createElement(
                    "a",
                    { target: "_blank", href: link[0], className: "Link" },
                    link[1]
                ),
                " "
            );
        });
    }
}

class SignForm extends React.Component {
    constructor() {
        super();
    }

    render() {
        return React.createElement(
            "div",
            { className: "Window-main--center" },
            React.createElement(
                "form",
                { className: "Form", onSubmit: this._onSubmit.bind(this) },
                React.createElement(
                    "div",
                    { className: "Form-body" },
                    React.createElement(
                        "p",
                        { className: "InputSide" },
                        React.createElement("input", { id: "username", type: "text", name: "username", placeholder: this.props.userPlaceholder, ref: input => this._username = input }),
                        React.createElement(
                            "label",
                            { htmlFor: "username" },
                            "Username"
                        )
                    ),
                    React.createElement(
                        "p",
                        { className: "InputSide" },
                        React.createElement("input", { id: "password", type: "pass", name: "password", placeholder: this.props.passPlaceholder, ref: input => this._password = input }),
                        React.createElement(
                            "label",
                            { htmlFor: "password" },
                            "Password"
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "Form-footer" },
                    React.createElement(
                        "button",
                        { type: "submit", name: "sign", className: "BtnBasic--lg" },
                        this.props.cta
                    ),
                    React.createElement(
                        Link,
                        { to: this.props.switchSignUrl, className: "Link" },
                        this.props.switchSignTxt
                    ),
                    React.createElement(
                        "p",
                        { className: "Form-error" },
                        this.props.errorMessage
                    )
                )
            )
        );
    }

    _onSubmit(e) {
        e.preventDefault();
        this.props.handleSubmit(this._username.value, this._password.value);
    }
}

class Login extends React.Component {

    constructor() {
        super();

        this.state = {
            errorMessage: ""
        };
    }

    render() {
        return React.createElement(SignForm, {
            cta: "Go",
            switchSignTxt: "Create account",
            switchSignUrl: "/register",
            errorMessage: this.state.errorMessage,
            handleSubmit: this._handleSubmit.bind(this),
            userPlaceholder: "qwerty",
            passPlaceholder: "123rty"
        });
    }

    _handleSubmit(username, password) {
        this._validateUser(username, password) ? this.props.setLogged(username) : this.setState({ errorMessage: 'What about creating a new account?' });
    }

    _validateUser(username, password) {
        let mkUsers = LS.get('mkUsers', true);
        return mkUsers && mkUsers[username] && mkUsers[username].password === password;
    }

}

class Register extends React.Component {

    constructor() {
        super();

        this.mkUsers = LS.get('mkUsers', true) || {};

        this.state = {
            errorMessage: ""
        };
    }

    render() {
        return React.createElement(SignForm, {
            cta: "Register",
            switchSignTxt: "Login",
            switchSignUrl: "/login",
            errorMessage: this.state.errorMessage,
            handleSubmit: this._handleSubmit.bind(this),
            userPlaceholder: "newQwerty",
            passPlaceholder: "que456"
        });
    }

    _handleSubmit(username, password) {
        !/^[-]?[0-9]+[\.]?[0-9]+$/.test(username) && username.length >= 3 && password.length >= 3 && !this.mkUsers[username] ? this._registerUser(username, password) : this.setState({ errorMessage: 'You can be more creative than that' });
    }

    _registerUser(username, password) {

        this.mkUsers[username] = {
            'password': password
        };

        LS.set('mkUsers', this.mkUsers, true);

        this.props.setLogged(username);
    }

}

class Dashboard extends React.Component {

    render() {

        var componentToRender = this.props.view;
        var componentLookup = {
            Search: React.createElement(Search, null),
            Favorites: React.createElement(Favorites, null)
        };

        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "Nav" },
                React.createElement(
                    "nav",
                    { className: "Nav-tabs" },
                    React.createElement(
                        Link,
                        { to: "dashboard/search", className: "BtnBasic--lg", activeClassName: "active" },
                        "Search"
                    ),
                    React.createElement(
                        Link,
                        { to: "dashboard/favorites", className: "BtnBasic--lg", activeClassName: "active" },
                        "Favorites"
                    )
                ),
                React.createElement(
                    "div",
                    { className: "Nav-actions" },
                    React.createElement(
                        Link,
                        { to: "/", onClick: this._handleLogOut.bind(this), className: "BtnBasic--md" },
                        "Logout"
                    )
                )
            ),
            componentLookup[componentToRender]
        );
    }

    _handleLogOut() {
        this.props.setLogged();
    }
}

class Search extends React.Component {

    constructor() {
        super();

        this.state = {
            searchValue: "",
            artistsFound: null
        };
    }

    _onSearch() {
        var value = this._search.value,
            artistsFoundLoad = [];

        this.setState({ searchValue: value });

        if (value.length > 0) {

            //while waiting for request...
            let loading = React.createElement(
                "div",
                { className: "stateEmpty" },
                "L\u25C9_\u25C9king... "
            );
            this.setState({ artistsFound: loading });

            Ajx.getJSON('GET', `https://music-api.musikki.com/v1/artists?q=[artist-name:${ value }]&appkey=123456789&appid=123456789&limit=7`).then(response => {
                // console.log(response);
                for (var i = 0, artist = {}, keyString = "", artists = response.results, artistsLength = artists.length; i < artistsLength; i++) {
                    artist = {
                        id: artists[i].mkid,
                        name: artists[i].name,
                        thumb: artists[i].image,
                        dates: artists[i].dates ? [artists[i].dates.start.year, artists[i].dates.end] : null,
                        genres: artists[i].genres
                    };
                    artistsFoundLoad.push(artist);
                }
                this.setState({ artistsFound: artistsFoundLoad });
            }).catch(function (response) {
                console.error('Augh, there was an error!', response);
            });
        } else {
            this.setState({ artistsFound: null });
        }
    }

    _getArtists() {
        let artists = this.state.artistsFound;

        if (artists != null) {

            if (artists.constructor === Array) {

                if (artists.length > 0) {
                    return artists.map(artist => {
                        return React.createElement(Artist, { key: artist.id.toString(),
                            id: artist.id.toString(),
                            name: artist.name,
                            thumb: artist.thumb,
                            dates: artist.dates,
                            genres: artist.genres
                        });
                    });
                } else {
                    return React.createElement(
                        "div",
                        { className: "stateEmpty" },
                        "Holy, who are they? (\u0CA0~\u0CA0)"
                    );
                }
            } else {
                return artists;
            }
        }
    }

    render() {
        const artists = this._getArtists();
        let artistsNodes = React.createElement(
            "div",
            { className: "ArtistsList" },
            artists
        );

        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "InputSearch" },
                React.createElement(
                    "label",
                    { htmlFor: "searchArtist", hidden: true },
                    "Artist Name"
                ),
                React.createElement("input", { id: "searchArtist", type: "text", name: "searchArtist", placeholder: "Artist Name", ref: input => this._search = input, onChange: this._onSearch.bind(this) }),
                React.createElement(
                    "svg",
                    { className: "InputSearch-svg", width: "18px", height: "18px", viewBox: "0 0 60 60" },
                    React.createElement(
                        "g",
                        { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
                        React.createElement("path", { d: "M59.1423313,55.2805043 C53.0483313,48.9715043 48.1303313,41.8745043 42.9653313,34.8175043 C42.5853313,34.3015043 42.1203313,33.9775043 41.6273313,33.7925043 C46.2023313,27.6195043 49.0563313,19.8485043 47.9153313,12.4835043 C45.7943313,-1.23649572 30.3703313,-1.21549572 19.7493313,1.26150428 C15.8623313,2.16850428 12.0793313,3.52450428 8.36533126,4.96950428 C6.08233126,5.85650428 6.02633126,8.65350428 7.28633126,9.95450428 C-0.367668741,16.8285043 -3.37666874,27.0245043 5.14833126,37.4855043 C13.0083313,47.1355043 25.3743313,48.2585043 35.0233313,40.6585043 C41.4803313,47.1375043 48.0643313,53.4635043 55.1443313,59.2825043 C57.9133313,61.5585043 61.7283313,57.9535043 59.1423313,55.2805043 L59.1423313,55.2805043 Z M15.1673313,38.6515043 C8.69733126,35.2645043 3.73933126,27.7035043 6.11133126,20.4635043 C9.58733126,9.85950428 24.4293313,5.35450428 34.2283313,7.41550428 C35.4783313,7.68050428 36.4673313,7.16850428 37.0823313,6.37250428 C38.7913313,7.17650428 40.2503313,8.39550428 41.3063313,10.1875043 C45.1503313,16.7155043 40.2993313,26.3725043 36.2093313,31.5465043 C35.8783313,31.9665043 35.5303313,32.3765043 35.1713313,32.7805043 C35.1533313,32.7685043 35.1443313,32.7525043 35.1303313,32.7425043 C32.6213313,30.1865043 28.7343313,33.9935043 31.0153313,36.5935043 C26.3943313,39.9805043 20.7203313,41.5565043 15.1673313,38.6515043 L15.1673313,38.6515043 Z" })
                    )
                )
            ),
            artistsNodes
        );
    }
}

class Favorites extends React.Component {

    render() {
        const artistsFav = this._getArtistsFav();

        return React.createElement(
            "div",
            { className: "ArtistsList" },
            artistsFav
        );
    }

    _getArtistsFav() {
        var userLogged = LS.get('userLogged'),
            mkUsers = LS.get('mkUsers', true),
            mkUserThis = mkUsers[userLogged],
            artistsFav = mkUserThis.favArr || [];

        if (artistsFav.length > 0) {
            return artistsFav.map(artist => {
                return React.createElement(Artist, { key: artist.id.toString(),
                    id: artist.id.toString(),
                    name: artist.name,
                    thumb: artist.thumb,
                    dates: artist.dates,
                    genres: artist.genres
                });
            });
        } else {
            return React.createElement(
                "div",
                { className: "stateEmpty" },
                "nothing yet \u30FE(\u2310\u25A0_\u25A0)\u30CE\u266A"
            );
        }
    }
}

class Artist extends React.Component {

    constructor() {
        super();

        this.state = {
            isFav: null
        };
    }

    componentWillMount() {
        this._isFavoriteSet();
    }

    _isFavoriteSet() {
        var userLogged = LS.get('userLogged'),
            mkUsers = LS.get('mkUsers', true),
            mkUserThis = mkUsers[userLogged];

        mkUserThis.favName != null && mkUserThis.favName.indexOf(this.props.id) > -1 ? this.setState({ isFav: true }) : this.setState({ isFav: false });
    }

    render() {
        let genres = this._getGenres(),
            thumbBg = {
            backgroundImage: "url(" + this.props.thumb + ")"
        };

        return React.createElement(
            "div",
            { className: "Artist" },
            React.createElement("div", { className: "Artist-cover", style: thumbBg }),
            React.createElement(
                "div",
                { className: "Artist-info" },
                React.createElement(
                    "h3",
                    { className: "Artist-name" },
                    this.props.name,
                    React.createElement(
                        "span",
                        { className: "Artist-dates" },
                        this.props.dates ? this.props.dates[0] + " - " + (this.props.dates[1] ? this.props.dates[1] : "now") : ""
                    )
                ),
                React.createElement(
                    "p",
                    { className: "Artist-details" },
                    genres
                )
            ),
            React.createElement(
                "div",
                { className: "Artist-actions" },
                React.createElement(
                    "button",
                    { className: "BtnAct", "data-fav": this.state.isFav, type: "button", name: "favorite", onClick: this._updateIsFav.bind(this) },
                    React.createElement(
                        "svg",
                        { className: "BtnAct-check", width: "25px", height: "25px", viewBox: "0 0 91 78" },
                        React.createElement(
                            "g",
                            { stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" },
                            React.createElement(
                                "g",
                                { transform: "translate(-5.000000, 0.000000)", fill: "#000000" },
                                React.createElement("path", { d: "M5.058,40.286 L10.939,40.286 C16.786,46.384 24.335,51.506 28.753,59.653 C30.059,62.062 32.025,63.952 35.251,63.313 C43.053,58.356 48.669,51.064 54.773,44.348 C60.994,37.504 66.324,29.833 72.696,23.146 C79.198,16.322 83.223,7.877 88.722,0.638 C91.331,-0.36 93.479,-0.365 94.957,2.218 C94.957,2.86 95.205,3.657 94.919,4.13 C91.825,9.237 88.888,14.465 85.425,19.315 C81.979,24.142 77.749,28.367 74.079,33.068 C70.047,38.231 64.957,42.535 62.331,48.796 C61.857,49.926 60.637,50.888 59.544,51.589 C52.611,56.037 48.558,63.152 43.279,69.116 C42.037,70.519 41.83,72.786 40.834,74.47 C38.433,78.528 33.276,79.322 30.89,75.502 C23.62,63.864 13.747,54.343 5.621,43.424 C5.277,42.967 5.376,42.179 5.058,40.286 L5.058,40.286 Z" })
                            )
                        )
                    )
                )
            )
        );
    }

    _updateIsFav() {
        this._updateFavLS(!this.state.isFav);
        this.setState({ isFav: !this.state.isFav });
    }

    _updateFavLS(toggle) {
        var userLogged = LS.get('userLogged'),
            mkUsers = LS.get('mkUsers', true),
            mkUserThis = mkUsers[userLogged];

        switch (toggle) {
            case true:

                //if LS doesnt exist, create it
                if (!mkUserThis.favName) {
                    mkUserThis.favName = [], mkUserThis.favArr = [];
                }

                //if artist is already fav don't add it again (it happens when refresh the page)
                if (mkUserThis.favName.indexOf(this.props.id) < 0) {
                    mkUserThis.favName.push(this.props.id);
                    mkUserThis.favArr.push({
                        id: this.props.id.toString(),
                        name: this.props.name,
                        thumb: this.props.thumb,
                        type: this.props.type,
                        dates: this.props.dates,
                        genres: this.props.genres
                    });
                    console.log(this.props.name + ' added');
                    break;
                }

            case false:
                //remove it only if it exists on LS
                if (mkUserThis.favName) {
                    var favNameI = mkUserThis.favName.indexOf(this.props.id);
                    if (favNameI > -1) {
                        mkUserThis.favName.splice(favNameI, 1);
                        mkUserThis.favArr.splice(favNameI, 1);
                        console.log(this.props.name + ' removed');
                    }
                }
                break;

            default:
                console.log('argument missing: add or remove');

        }

        //update LS mkUsers with new favorite
        mkUsers[userLogged] = mkUserThis;
        LS.set('mkUsers', mkUsers, true);
    }

    _getGenres() {
        if (this.props.genres.length > 0) {
            return this.props.genres.slice(0, 4).map(genre => {
                return React.createElement(
                    "span",
                    { className: "Link", key: genre.mkid },
                    genre.name
                ); //possible gender search
            });
        } else {
            return React.createElement(
                "span",
                null,
                React.createElement(
                    "i",
                    null,
                    "too cool to be defined"
                )
            );
        }
    }

}

class NotFound extends React.Component {
    render() {
        return React.createElement(
            "div",
            { className: "stateEmpty" },
            "I think you are lost. Aren't you? \xAF\xAF\\_(\u30C4)_/\xAF\xAF"
        );
    }
}

ReactDOM.render(React.createElement(
    Router,
    { history: hashHistory },
    React.createElement(
        Route,
        { path: "/", component: Window },
        React.createElement(IndexRoute, { component: () => React.createElement(InitialPage, { dash: "/" }) }),
        React.createElement(Route, { path: "login", component: () => React.createElement(InitialPage, { dash: "login" }) }),
        React.createElement(Route, { path: "register", component: () => React.createElement(InitialPage, { dash: "register" }) }),
        React.createElement(Route, { path: "dashboard", component: () => React.createElement(InitialPage, { dash: "dashboard", logout: "logout" }) }),
        React.createElement(Route, { path: "dashboard/search", component: () => React.createElement(InitialPage, { dash: "dashboard/search" }) }),
        React.createElement(Route, { path: "dashboard/favorites", component: () => React.createElement(InitialPage, { dash: "dashboard/favorites" }) }),
        React.createElement(Route, { path: "*", component: NotFound })
    )
), document.getElementById("musikkiEx"));