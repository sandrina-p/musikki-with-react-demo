// var { Router, Route, IndexRoute, hashHistory, IndexLink, Link, browserHistory } = ReactRouter;
// import { Router, Route, IndexRoute, hashHistory, IndexLink, Link, browserHistory } from 'react-router';

var Router = ReactRouter.Router;
var Route = ReactRouter.Route;
var IndexRoute = ReactRouter.IndexRoute;
var Link = ReactRouter.Link;
var browserHistory = ReactRouter.browserHistory;
var hashHistory = ReactRouter.hashHistory;
var IndexRedirect = ReactRouter.IndexRedirect;

/**
 * [LocalStorage basic functions DRYed]
 */
var LS = function () {

    return {
        get: function (key, parse = false) {
            return parse ? JSON.parse(localStorage.getItem(key)) : localStorage.getItem(key);
        },

        set: function (key, value, stringify = false) {
            return stringify ? localStorage.setItem(key, JSON.stringify(value)) : localStorage.setItem(key, value);
        },

        remove: function (key, value) {
            return localStorage.removeItem(key);
        }
    };
}();

/**
 * [Is not jQuery x)]
 */
var Ajx = function () {
    var xhr = null;

    return {
        getJSON: function (method, url) {
            return new Promise(function (resolve, reject) {

                if (xhr != null) {
                    xhr.abort();
                } else {
                    xhr = new XMLHttpRequest();
                }

                xhr.open(method, url);
                xhr.onload = function () {
                    if (this.status >= 200 && this.status < 300) {
                        resolve(JSON.parse(xhr.response));
                    } else {
                        reject({
                            status: this.status,
                            statusText: xhr.statusText
                        });
                    }
                };
                xhr.onerror = function () {
                    reject({
                        status: this.status,
                        statusText: xhr.statusText
                    });
                };
                xhr.send();
            });
        }
    };
}();

class InitialPage extends React.Component {

    constructor() {
        super();

        this.state = {
            userLogged: LS.get('userLogged') || false
        };
    }

    render() {
        let userLogged = this.state.userLogged,
            mkUsers = LS.get('mkUsers', true) || false;

        if (userLogged && mkUsers && mkUsers[userLogged]) {
            switch (this.props.dash) {
                case 'dashboard/favorites':
                    return React.createElement(Dashboard, { view: 'Favorites', setLogged: this._setLogged.bind(this) });

                // case '/':
                // case 'login':
                // case 'dashboard':
                // case 'dashboard/search':
                default:
                    // hashHistory.push('dashboard/search'); FIXME: for some reason it trows an error on console: Uncaught SyntaxError: Invalid regular expression: /^//: Stack overflow
                    return React.createElement(Dashboard, { view: 'Search', setLogged: this._setLogged.bind(this) });

            }
        } else {
            return this.props.dash == "register" ? React.createElement(Register, { setLogged: this._setLogged.bind(this) }) : React.createElement(Login, { setLogged: this._setLogged.bind(this) });
        }
    }

    _setLogged(username = false) {
        this.setState({
            userLogged: username
        });

        username ? LS.set('userLogged', username) : LS.remove('userLogged');

        username ? hashHistory.push('dashboard/search') : hashHistory.push('/');
    }
}

class Window extends React.Component {

    render() {
        //get window title. REVIEW: I know this is not the best approach but it works x)
        let viewTitle = window.location.hash.split('/');
        let viewTitleKey = viewTitle[viewTitle.length - 1];
        viewTitle = viewTitleKey == "" ? 'Musikki' : 'Musikki . ' + viewTitleKey;

        return React.createElement(
            'div',
            { className: 'Window' },
            React.createElement(
                'header',
                { className: 'Window-header' },
                React.createElement(
                    'h1',
                    null,
                    viewTitle
                )
            ),
            React.createElement(
                'main',
                { className: 'Window-main' },
                this.props.children
            ),
            React.createElement(
                'footer',
                { className: 'Window-footer' },
                React.createElement(
                    'h6',
                    null,
                    React.createElement(
                        'a',
                        { target: '_blank', href: 'https://github.com/sandrina-p', className: 'Link' },
                        'sandrina-p\'s first React project'
                    ),
                    '. ',
                    React.createElement(
                        'a',
                        { target: '_blank', href: 'https://github.com/sandrina-p/musikki-with-react-demo', className: 'Link' },
                        'github'
                    ),
                    '. ',
                    React.createElement(
                        'i',
                        null,
                        React.createElement(
                            'a',
                            { target: '_blank', href: 'https://musikki.com', className: 'Link' },
                            'Powered by Musikki'
                        )
                    ),
                    ' '
                )
            )
        );
    }

}

class Login extends React.Component {

    constructor() {
        super();

        this.state = {
            errorMessage: ""
        };
    }

    render() {
        return React.createElement(
            'div',
            { className: 'Window-main--center' },
            React.createElement(
                'form',
                { className: 'Form', onSubmit: this._handleSubmit.bind(this) },
                React.createElement(
                    'div',
                    { className: 'Form-body' },
                    React.createElement(
                        'p',
                        { className: 'InputSide' },
                        React.createElement('input', { id: 'username', type: 'text', name: 'username', placeholder: 'qwerty', ref: input => this._username = input }),
                        React.createElement(
                            'label',
                            { htmlFor: 'username' },
                            'Username'
                        )
                    ),
                    React.createElement(
                        'p',
                        { className: 'InputSide' },
                        React.createElement('input', { id: 'password', type: 'password', name: 'password', placeholder: '123456', ref: input => this._password = input }),
                        React.createElement(
                            'label',
                            { htmlFor: 'password' },
                            'Password'
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'Form-footer' },
                    React.createElement(
                        'button',
                        { type: 'submit', name: 'sign', className: 'BtnBasic--lg' },
                        'Go'
                    ),
                    React.createElement(
                        Link,
                        { to: '/register', className: 'Link' },
                        'Create account'
                    ),
                    React.createElement(
                        'p',
                        { className: 'Form-error' },
                        this.state.errorMessage
                    )
                )
            )
        );
    }

    _handleSubmit(e) {
        e.preventDefault();

        let username = this._username.value,
            password = this._password.value;

        if (this._checkUser(username, password)) {
            void 0;
            this.props.setLogged(username);
        } else {
            this.setState({ errorMessage: 'What about creating a new account?' });
        }
    }

    _checkUser(username, password) {
        let mkUsers = LS.get('mkUsers', true);
        return mkUsers && mkUsers[username] && mkUsers[username].password === password;
    }

}

class Register extends React.Component {

    constructor() {
        super();

        this.mkUsers = LS.get('mkUsers', true) || {};

        this.state = {
            errorMessage: ""
        };
    }

    render() {
        return (
            // todo merge this with login on _signForm.js
            React.createElement(
                'div',
                { className: 'Window-main--center' },
                React.createElement(
                    'form',
                    { className: 'Form', onSubmit: this._handleSubmit.bind(this) },
                    React.createElement(
                        'div',
                        { className: 'Form-body' },
                        React.createElement(
                            'p',
                            { className: 'InputSide' },
                            React.createElement('input', { id: 'username', type: 'text', name: 'username', placeholder: 'newQuerty', ref: input => this._username = input }),
                            React.createElement(
                                'label',
                                { htmlFor: 'username' },
                                'Username'
                            )
                        ),
                        React.createElement(
                            'p',
                            { className: 'InputSide' },
                            React.createElement('input', { id: 'password', type: 'pass', name: 'password', placeholder: '654321', ref: input => this._password = input }),
                            React.createElement(
                                'label',
                                { htmlFor: 'password' },
                                'Password'
                            )
                        )
                    ),
                    React.createElement(
                        'div',
                        { className: 'Form-footer' },
                        React.createElement(
                            'button',
                            { type: 'submit', name: 'sign', className: 'BtnBasic--lg' },
                            'Register'
                        ),
                        React.createElement(
                            Link,
                            { to: '/login', className: 'Link' },
                            'Login'
                        ),
                        React.createElement(
                            'p',
                            { className: 'Form-error' },
                            this.state.errorMessage
                        )
                    )
                )
            )
        );
    }

    _handleSubmit(e) {
        e.preventDefault();

        let username = this._username.value,
            password = this._password.value;

        void 0;
        if (!/^[-]?[0-9]+[\.]?[0-9]+$/.test(username) && username.length >= 3 && password.length >= 3 && !this.mkUsers[username]) {
            void 0;
            this._registerUser(username, password);
            this.props.setLogged(username);
        } else {
            this.setState({ errorMessage: 'You can be more creative than that' });
        }
    }

    _registerUser(username, password) {

        this.mkUsers[username] = {
            'password': password
        };

        LS.set('mkUsers', this.mkUsers, true);
    }

}

// IN PROGRESS
// class SignForm extends React.Component {
//     constructor() {
//         super();
//
//         var self = this;
//     }
//
//     _handleForm(e) {
//         console.log('ew');
//         e.preventDefault();
//         this.props.onFormChange(this._username.value, this._username.value);
//     }
//
//     render() {
//         return (
//             <div className="Window-main--center">
//                 <form className="Form" onSubmit={this._handleForm}>
//                     <div className="Form-body">
//                         <p className="InputSide">
//                             <input id="username" type="text" name="username" placeholder="qwerty" ref={(input) => this._username = input}/>
//                             <label htmlFor="username">Username</label>
//                         </p>
//
//                         <p className="InputSide">
//                             <input id="password" type="pass" name="password" placeholder="123rty" ref={(input) => this._password = input}/>
//                             <label htmlFor="password">Password</label>
//                         </p>
//                     </div>
//
//                     <div className="Form-footer">
//                         <button type="submit" name="sign" className="BtnBasic--lg">{this.props.cta}</button>
//                         <Link to="/login" className="Link">{this.props.otherSign}</Link>
//                         <p className="Form-error">{this.props.errorMessage}</p>
//                     </div>
//                 </form>
//             </div>
//         )
//     }
//
//     // _onSubmit(e) {
//     //     e.preventDefault();
//     //     console.log('creew');
//     //     self.props.handleSubmit.bind(self);
//     // }
// }


class Dashboard extends React.Component {

    render() {

        var componentToRender = this.props.view;

        var componentLookup = {

            Search: React.createElement(Search, null),

            Favorites: React.createElement(Favorites, null)

        };

        return React.createElement(
            'div',
            null,
            React.createElement(
                'div',
                { className: 'Nav' },
                React.createElement(
                    'nav',
                    { className: 'Nav-tabs' },
                    React.createElement(
                        Link,
                        { to: 'dashboard/search', className: 'BtnBasic--lg', activeClassName: 'active' },
                        'Search'
                    ),
                    React.createElement(
                        Link,
                        { to: 'dashboard/favorites', className: 'BtnBasic--lg', activeClassName: 'active' },
                        'Favorites'
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'Nav-actions' },
                    React.createElement(
                        Link,
                        { to: '/', onClick: this._handleLogOut.bind(this), className: 'BtnBasic--md' },
                        'Logout'
                    )
                )
            ),
            componentLookup[componentToRender]
        );
    }

    _handleLogOut() {

        this.props.setLogged();
    }

}

class Search extends React.Component {

    constructor() {
        super();

        this.state = {
            searchValue: "",
            artistsFound: null
        };
    }

    _onSearch() {
        var value = this._search.value,
            artistsFoundLoad = [];

        this.setState({ searchValue: value });

        if (value.length > 0) {

            Ajx.getJSON('GET', `https://music-api.musikki.com/v1/artists?q=[artist-name:${ value }]&appkey=123456789&appid=123456789&limit=6`).then(response => {
                // console.log(response);
                for (var i = 0, artist = {}, keyString = "", artists = response.results, artistsLength = artists.length; i < artistsLength; i++) {
                    artist = {
                        id: artists[i].mkid,
                        name: artists[i].name,
                        thumb: artists[i].image,
                        dates: artists[i].dates ? [artists[i].dates.start.year, artists[i].dates.end] : null,
                        genres: artists[i].genres
                    };
                    artistsFoundLoad.push(artist);
                }
                this.setState({ artistsFound: artistsFoundLoad });
            }).catch(function (response) {
                void 0;
            });
        } else {
            this.setState({ artistsFound: null });
        }
    }

    _getArtists() {
        let artists = this.state.artistsFound;
        if (artists != null) {
            if (artists.length > 1) {

                return artists.map(artist => {
                    return React.createElement(Artist, {
                        key: artist.id.toString(),
                        id: artist.id.toString(),
                        name: artist.name,
                        thumb: artist.thumb,
                        dates: artist.dates,
                        genres: artist.genres
                    });
                });
            } else {
                return React.createElement(
                    'div',
                    { className: 'stateEmpty' },
                    'Holy, who are they? (\u0CA0~\u0CA0)'
                );
            }
        }
    }

    render() {
        const artists = this._getArtists();
        let artistsNodes = React.createElement(
            'div',
            { className: 'ArtistsList' },
            artists
        );

        return React.createElement(
            'div',
            null,
            React.createElement(
                'div',
                { className: 'InputSearch' },
                React.createElement(
                    'label',
                    { htmlFor: 'searchArtist', hidden: true },
                    'Artist Name'
                ),
                React.createElement('input', { id: 'searchArtist', type: 'text', name: 'searchArtist', placeholder: 'Artist Name', ref: input => this._search = input, onChange: this._onSearch.bind(this) }),
                React.createElement(
                    'svg',
                    { className: 'InputSearch-svg', width: '18px', height: '18px', viewBox: '0 0 60 60' },
                    React.createElement(
                        'g',
                        { stroke: 'none', strokeWidth: '1', fill: 'none', fillRule: 'evenodd' },
                        React.createElement('path', { d: 'M59.1423313,55.2805043 C53.0483313,48.9715043 48.1303313,41.8745043 42.9653313,34.8175043 C42.5853313,34.3015043 42.1203313,33.9775043 41.6273313,33.7925043 C46.2023313,27.6195043 49.0563313,19.8485043 47.9153313,12.4835043 C45.7943313,-1.23649572 30.3703313,-1.21549572 19.7493313,1.26150428 C15.8623313,2.16850428 12.0793313,3.52450428 8.36533126,4.96950428 C6.08233126,5.85650428 6.02633126,8.65350428 7.28633126,9.95450428 C-0.367668741,16.8285043 -3.37666874,27.0245043 5.14833126,37.4855043 C13.0083313,47.1355043 25.3743313,48.2585043 35.0233313,40.6585043 C41.4803313,47.1375043 48.0643313,53.4635043 55.1443313,59.2825043 C57.9133313,61.5585043 61.7283313,57.9535043 59.1423313,55.2805043 L59.1423313,55.2805043 Z M15.1673313,38.6515043 C8.69733126,35.2645043 3.73933126,27.7035043 6.11133126,20.4635043 C9.58733126,9.85950428 24.4293313,5.35450428 34.2283313,7.41550428 C35.4783313,7.68050428 36.4673313,7.16850428 37.0823313,6.37250428 C38.7913313,7.17650428 40.2503313,8.39550428 41.3063313,10.1875043 C45.1503313,16.7155043 40.2993313,26.3725043 36.2093313,31.5465043 C35.8783313,31.9665043 35.5303313,32.3765043 35.1713313,32.7805043 C35.1533313,32.7685043 35.1443313,32.7525043 35.1303313,32.7425043 C32.6213313,30.1865043 28.7343313,33.9935043 31.0153313,36.5935043 C26.3943313,39.9805043 20.7203313,41.5565043 15.1673313,38.6515043 L15.1673313,38.6515043 Z' })
                    )
                )
            ),
            artistsNodes
        );
    }
}

class Favorites extends React.Component {

    render() {
        const artistsFav = this._getArtistsFav();

        return React.createElement(
            'div',
            { className: 'ArtistsList' },
            artistsFav
        );
    }

    _getArtistsFav() {
        // console.log(this.state.artistsFound);

        var userLogged = LS.get('userLogged'),
            mkUsers = LS.get('mkUsers', true),
            mkUserThis = mkUsers[userLogged],
            artistsFav = mkUserThis.favArr || [],
            checkArt = _checkArt();

        function _checkArt() {
            if (artistsFav.length > 0) {
                return artistsFav.map(artist => {
                    return React.createElement(Artist, {
                        key: artist.id.toString(),
                        id: artist.id.toString(),
                        name: artist.name,
                        thumb: artist.thumb,
                        dates: artist.dates,
                        genres: artist.genres
                    });
                });
            } else {
                return React.createElement(
                    'div',
                    { className: 'stateEmpty' },
                    'nothing yet \u30FE(\u2310\u25A0_\u25A0)\u30CE\u266A'
                );
            }
        }

        return checkArt;
    }
}

class Artist extends React.Component {

    constructor() {
        super();

        this.state = {
            isFav: null
        };
    }

    componentWillMount() {
        this._isFavoriteSet();
    }

    _isFavoriteSet() {
        var userLogged = LS.get('userLogged'),
            mkUsers = LS.get('mkUsers', true),
            mkUserThis = mkUsers[userLogged];

        if (mkUserThis.favName != null && mkUserThis.favName.indexOf(this.props.id) > -1) {
            void 0;
            this.setState({ isFav: true });
        } else {
            void 0;
            this.setState({ isFav: false });
        }
    }

    render() {
        var genres = this._getGenres(),
            thumbBg = {
            backgroundImage: "url(" + this.props.thumb + ")"
        };

        return React.createElement(
            'div',
            { className: 'Artist' },
            React.createElement('div', { className: 'Artist-cover', style: thumbBg }),
            React.createElement(
                'div',
                { className: 'Artist-info' },
                React.createElement(
                    'h3',
                    { className: 'Artist-name' },
                    this.props.name,
                    React.createElement(
                        'span',
                        { className: 'Artist-dates' },
                        this.props.dates ? this.props.dates[0] + " - " + (this.props.dates[1] ? this.props.dates[1] : "now") : ""
                    )
                ),
                React.createElement(
                    'p',
                    { className: 'Artist-details' },
                    genres
                )
            ),
            React.createElement(
                'div',
                { className: 'Artist-actions' },
                React.createElement(
                    'button',
                    { className: 'BtnAct', 'data-fav': this.state.isFav, type: 'button', name: 'favorite', onClick: this._updateIsFav.bind(this) },
                    React.createElement(
                        'svg',
                        { className: 'BtnAct-check', width: '25px', height: '25px', viewBox: '0 0 91 78' },
                        React.createElement(
                            'g',
                            { stroke: 'none', strokeWidth: '1', fill: 'none', fillRule: 'evenodd' },
                            React.createElement(
                                'g',
                                { transform: 'translate(-5.000000, 0.000000)', fill: '#000000' },
                                React.createElement('path', { d: 'M5.058,40.286 L10.939,40.286 C16.786,46.384 24.335,51.506 28.753,59.653 C30.059,62.062 32.025,63.952 35.251,63.313 C43.053,58.356 48.669,51.064 54.773,44.348 C60.994,37.504 66.324,29.833 72.696,23.146 C79.198,16.322 83.223,7.877 88.722,0.638 C91.331,-0.36 93.479,-0.365 94.957,2.218 C94.957,2.86 95.205,3.657 94.919,4.13 C91.825,9.237 88.888,14.465 85.425,19.315 C81.979,24.142 77.749,28.367 74.079,33.068 C70.047,38.231 64.957,42.535 62.331,48.796 C61.857,49.926 60.637,50.888 59.544,51.589 C52.611,56.037 48.558,63.152 43.279,69.116 C42.037,70.519 41.83,72.786 40.834,74.47 C38.433,78.528 33.276,79.322 30.89,75.502 C23.62,63.864 13.747,54.343 5.621,43.424 C5.277,42.967 5.376,42.179 5.058,40.286 L5.058,40.286 Z' })
                            )
                        )
                    )
                )
            )
        );
    }

    _getGenres() {
        if (this.props.genres.length > 0) {
            return this.props.genres.slice(0, 4).map(genre => {
                return React.createElement(
                    'span',
                    { className: 'Link', key: genre.mkid },
                    genre.name
                ); //possible gender search
            });
        } else {
            return React.createElement(
                'span',
                null,
                React.createElement(
                    'i',
                    null,
                    'too cool to be defined'
                )
            );
        }
    }

    _updateIsFav() {
        this._updateFavLS(!this.state.isFav);
        this.setState({ isFav: !this.state.isFav });
    }

    _updateFavLS(toggle) {
        void 0;
        var userLogged = LS.get('userLogged'),
            mkUsers = LS.get('mkUsers', true),
            mkUserThis = mkUsers[userLogged];

        switch (toggle) {
            case true:

                if (!mkUserThis.favName) {
                    mkUserThis.favName = [], mkUserThis.favArr = [];
                }

                if (mkUserThis.favName.indexOf(this.props.id) < 0) {
                    mkUserThis.favName.push(this.props.id);
                    mkUserThis.favArr.push({
                        id: this.props.id.toString(),
                        name: this.props.name,
                        thumb: this.props.thumb,
                        type: this.props.type,
                        dates: this.props.dates,
                        genres: this.props.genres
                    });
                    break;
                }

            case false:
                if (mkUserThis.favName) {
                    var favNameI = mkUserThis.favName.indexOf(this.props.id);
                    if (favNameI > -1) {
                        mkUserThis.favName.splice(favNameI, 1);
                        mkUserThis.favArr.splice(favNameI, 1);
                    }
                }
                break;

            default:
                void 0;

        }

        mkUsers[userLogged] = mkUserThis; //update mkUsers with new favorite
        LS.set('mkUsers', mkUsers, true);
    }

}

class NotFound extends React.Component {

    render() {

        return React.createElement(
            'div',
            { className: 'stateEmpty' },
            'I think you are lost. Aren\'t you? \xAF\xAF\\_(\u30C4)_/\xAF\xAF'
        );
    }

}

ReactDOM.render(React.createElement(
    Router,
    { history: hashHistory },
    React.createElement(
        Route,
        { path: '/', component: Window },
        React.createElement(IndexRoute, { component: () => React.createElement(InitialPage, { dash: '/' }) }),
        React.createElement(Route, { path: 'login', component: () => React.createElement(InitialPage, { dash: 'login' }) }),
        React.createElement(Route, { path: 'register', component: () => React.createElement(InitialPage, { dash: 'register' }) }),
        React.createElement(Route, { path: 'dashboard', component: () => React.createElement(InitialPage, { dash: 'dashboard', logout: 'logout' }) }),
        React.createElement(Route, { path: 'dashboard/search', component: () => React.createElement(InitialPage, { dash: 'dashboard/search' }) }),
        React.createElement(Route, { path: 'dashboard/favorites', component: () => React.createElement(InitialPage, { dash: 'dashboard/favorites' }) }),
        React.createElement(Route, { path: '*', component: NotFound })
    )
), document.getElementById("musikkiEx"));